XSS Attack:
This attack exploits a vulnerability in the application that allows attackers to inject malicious scripts into web pages viewed by other users. In this particular case, an attacker can use the XSS vulnerability to inject a script that calls the alert() function with the message "hello". This can be done by submitting a form or modifying a URL to include the malicious script. The bug triggered by this attack is that the script can execute in the victim's browser, potentially allowing an attacker to steal their sensitive data, such as login credentials, session tokens, or credit card information.

Gift Card Attack:
This attack allows an attacker to force another user to gift a gift card to their account without their knowledge. This can be done by manipulating the parameters of the gift card creation request sent by the user. For example, an attacker can modify the form data or intercept and modify the request using a tool like Burp Suite. The bug triggered by this attack is that the application does not properly authenticate and authorize gift card transactions, allowing an attacker to steal gift cards meant for other users.

Password Attack:
This attack allows an attacker to obtain the salted password for a user given their username. The attacker can do this by exploiting a vulnerability in the application's password reset mechanism or by exploiting a weakness in the password storage scheme. In this particular case, the application stores salted passwords in the database, but the salts are predictable and can be easily brute-forced. An attacker can use this vulnerability to obtain the salted password for the admin user and then use a password cracking tool to obtain the plaintext password. The bug triggered by this attack is that the application uses weak password storage and management practices, allowing an attacker to easily obtain user passwords.

Command Injection Attack:
This attack allows an attacker to execute arbitrary commands on the server by exploiting a vulnerability in the application's input validation and sanitization mechanisms. In this particular case, an attacker can exploit a vulnerability in the CSV file upload functionality to upload a malicious file containing a shell command. The application does not properly validate and sanitize the contents of the file, allowing an attacker to execute the uploaded command on the server with elevated privileges. The bug triggered by this attack is that the application does not properly validate and sanitize user input, allowing an attacker to execute arbitrary code on the server.